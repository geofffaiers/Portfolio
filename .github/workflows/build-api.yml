# .github/workflows/ci-cd-pipeline.yml
name: Build API Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'api/**'
      - '.github/workflows/build-api.yml'

env:
  COMPOSE_BAKE: true
  IMAGE_TAG: ${{ github.run_id }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Create .env file
        run: |
          echo "MYSQL_HOST=${{ vars.MYSQL_HOST }}" >> $GITHUB_WORKSPACE/.env
          echo "MYSQL_ROOT_USER=${{ vars.MYSQL_ROOT_USER }}" >> $GITHUB_WORKSPACE/.env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_WORKSPACE/.env
          echo "MYSQL_DATABASE=${{ vars.MYSQL_DATABASE }}" >> $GITHUB_WORKSPACE/.env
          echo "MYSQL_PORT=${{ vars.MYSQL_PORT }}" >> $GITHUB_WORKSPACE/.env
          echo "API_PORT=${{ vars.API_PORT }}" >> $GITHUB_WORKSPACE/.env
          echo "CLIENT_PORT=${{ vars.CLIENT_PORT }}" >> $GITHUB_WORKSPACE/.env
          echo "CLIENT_URL=${{ vars.CLIENT_URL }}" >> $GITHUB_WORKSPACE/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_WORKSPACE/.env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> $GITHUB_WORKSPACE/.env
          echo "EMAIL=${{ vars.EMAIL }}" >> $GITHUB_WORKSPACE/.env

      - name: Build Docker images
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/portfolio-api:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/portfolio-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          