# .github/workflows/ci-cd-pipeline.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Create .env file
        run: |
          echo "MYSQL_HOST=${{ vars.MYSQL_HOST }}" >> $GITHUB_WORKSPACE/.env
          echo "MYSQL_ROOT_USER=${{ vars.MYSQL_ROOT_USER }}" >> $GITHUB_WORKSPACE/.env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_WORKSPACE/.env
          echo "MYSQL_DATABASE=${{ vars.MYSQL_DATABASE }}" >> $GITHUB_WORKSPACE/.env
          echo "MYSQL_PORT=${{ vars.MYSQL_PORT }}" >> $GITHUB_WORKSPACE/.env
          echo "API_PORT=${{ vars.API_PORT }}" >> $GITHUB_WORKSPACE/.env
          echo "NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}" >> $GITHUB_WORKSPACE/.env
          echo "CLIENT_PORT=${{ vars.CLIENT_PORT }}" >> $GITHUB_WORKSPACE/.env
          echo "CLIENT_URL=${{ vars.CLIENT_URL }}" >> $GITHUB_WORKSPACE/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_WORKSPACE/.env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> $GITHUB_WORKSPACE/.env

      - name: Build Docker images
        run: docker-compose build

      - name: Tag and Push Docker images
        run: |
          for service in portfolio-mysql-db portfolio-api portfolio-frontend portfolio-nginx; do
            docker tag $service:latest ${{ secrets.DOCKER_USERNAME }}/$service:latest
            docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
          done

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Clear .env file on Droplet
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          passphrase: ${{ secrets.DROPLET_SSH_PASSPHRASE }}
          port: 22
          script: rm -f /root/.env

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          passphrase: ${{ secrets.DROPLET_SSH_PASSPHRASE }}
          port: 22
          script: |
            echo ${{ secrets.DOCKER_PAT }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker network create portfolio || true
            for service in portfolio-mysql-db portfolio-api portfolio-frontend portfolio-nginx; do
              docker pull ${{ secrets.DOCKER_USERNAME }}/$service:latest
            done
            docker stop portfolio-mysql-db portfolio-api portfolio-frontend portfolio-nginx || true
            docker rm -f portfolio-mysql-db portfolio-api portfolio-frontend portfolio-nginx || true
            echo "MYSQL_HOST=${{ vars.MYSQL_HOST }}" >> /root/.env
            echo "MYSQL_ROOT_USER=${{ vars.MYSQL_ROOT_USER }}" >> /root/.env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> /root/.env
            echo "MYSQL_DATABASE=${{ vars.MYSQL_DATABASE }}" >> /root/.env
            echo "MYSQL_PORT=${{ vars.MYSQL_PORT }}" >> /root/.env
            echo "API_PORT=${{ vars.API_PORT }}" >> /root/.env
            echo "NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}" >> /root/.env
            echo "CLIENT_PORT=${{ vars.CLIENT_PORT }}" >> /root/.env
            echo "CLIENT_URL=${{ vars.CLIENT_URL }}" >> /root/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /root/.env
            echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> /root/.env
            docker run -d --name portfolio-mysql-db --network portfolio --env-file /root/.env ${{ secrets.DOCKER_USERNAME }}/portfolio-mysql-db:latest
            docker run -d --name portfolio-api --network portfolio --env-file /root/.env -p ${{ vars.API_PORT }}:${{ vars.API_PORT }} ${{ secrets.DOCKER_USERNAME }}/portfolio-api:latest
            docker run -d --name portfolio-frontend --network portfolio -p ${{ vars.CLIENT_PORT }}:${{ vars.CLIENT_PORT }} ${{ secrets.DOCKER_USERNAME }}/portfolio-frontend:latest
            docker run -d --name portfolio-nginx --network portfolio -p 80:80 ${{ secrets.DOCKER_USERNAME }}/portfolio-nginx:latest
